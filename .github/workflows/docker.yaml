- name: Build and push image Aliyun
  run: |
    bash << 'EOF'
    set -euo pipefail

    # 登录阿里云（安全方式）
    echo "$ALIYUN_REGISTRY_PASSWORD" | docker login -u "$ALIYUN_REGISTRY_USER" --password-stdin "$ALIYUN_REGISTRY"

    declare -A duplicate_images
    declare -A temp_map

    # 第一遍扫描：检测重名
    while IFS= read -r line || [ -n "$line" ]; do
        [[ -z "$line" ]] && continue
        [[ "$line" =~ ^[[:space:]]*# ]] && continue

        # 清理 docker pull 前缀
        line_clean=$(echo "$line" | sed 's/^[[:space:]]*docker[[:space:]]\+pull[[:space:]]\+//')

        # 提取 --platform
        platform=""
        if [[ $line_clean =~ --platform[=\ ]+([^[:space:]]+) ]]; then
            platform="${BASH_REMATCH[1]}"
        fi

        # 提取镜像名
        image=$(echo "$line_clean" | awk '{print $NF}' | sed 's/@.*//')
        image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
        image_name=$(echo "$image_name_tag" | cut -d: -f1)

        # 提取命名空间
        name_space=$(echo "$image" | awk -F'/' '{
            if (NF==3) print $2;
            else if (NF==2 && $1 != "docker.io") print $1;
            else print "library";
        }' | sed 's/[^a-zA-Z0-9._-]/_/g')

        # 检测重名
        if [[ -n "${temp_map[$image_name]}" ]]; then
            if [[ "${temp_map[$image_name]}" != "$name_space" ]]; then
                duplicate_images["$image_name"]=1
            fi
        else
            temp_map["$image_name"]="$name_space"
        fi
    done < images.txt

    # 第二遍：拉取、打标签、推送
    while IFS= read -r line || [ -n "$line" ]; do
        [[ -z "$line" ]] && continue
        [[ "$line" =~ ^[[:space:]]*# ]] && continue

        line_clean=$(echo "$line" | sed 's/^[[:space:]]*docker[[:space:]]\+pull[[:space:]]\+//')
        platform=""
        if [[ $line_clean =~ --platform[=\ ]+([^[:space:]]+) ]]; then
            platform="${BASH_REMATCH[1]}"
        fi

        image=$(echo "$line_clean" | awk '{print $NF}' | sed 's/@.*//')
        original_image="$image"

        echo "Pulling $image (platform: $platform)"
        if [ -n "$platform" ]; then
            docker pull --platform "$platform" "$image"
        else
            docker pull "$image"
        fi

        image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}' | sed 's/@.*//')
        image_name=$(echo "$image_name_tag" | cut -d: -f1)

        name_space=$(echo "$image" | awk -F'/' '{
            if (NF==3) print $2;
            else if (NF==2 && $1 != "docker.io") print $1;
            else print "library";
        }' | sed 's/[^a-zA-Z0-9._-]/_/g')

        platform_prefix=""
        if [ -n "$platform" ]; then
            platform_prefix="${platform//\//_}_"
        fi

        name_space_prefix=""
        if [[ -n "${duplicate_images[$image_name]}" ]] && [ "$name_space" != "library" ]; then
            name_space_prefix="${name_space}_"
        fi

        new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${platform_prefix}${name_space_prefix}${image_name_tag}"
        echo "Tagging $original_image -> $new_image"
        docker tag "$original_image" "$new_image"
        docker push "$new_image"

        echo "Cleaning up..."
        df -hT
        docker rmi "$original_image" || true
        docker rmi "$new_image" || true
        df -hT
    done < images.txt

    echo "✅ All images synced successfully."
    EOF
