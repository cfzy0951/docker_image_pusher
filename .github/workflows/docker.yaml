name: Docker

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAME_SPACE: ${{ secrets.ALIYUN_NAME_SPACE }}
  ALIYUN_REGISTRY_USER: ${{ secrets.ALIYUN_REGISTRY_USER }}
  ALIYUN_REGISTRY_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

jobs:
  build:
    name: Pull and Push
    runs-on: ubuntu-latest

    steps:
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          df -hT

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'
          build-mount-path: '/var/lib/docker/'

      - name: Restart docker
        run: sudo service docker restart

      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          df -hT

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image Aliyun
        run: |
          bash << 'EOF'
          set -euo pipefail

          docker login -u "$ALIYUN_REGISTRY_USER" --password-stdin "$ALIYUN_REGISTRY" <<< "$ALIYUN_REGISTRY_PASSWORD"

          declare -A duplicate_images
          declare -A temp_map

          while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            [[ "$line" =~ ^[[:space:]]*# ]] && continue

            line_clean=$(echo "$line" | sed 's/^[[:space:]]*docker[[:space:]]\+pull[[:space:]]\+//')
            platform=""
            if [[ $line_clean =~ --platform[=\ ]+([^[:space:]]+) ]]; then
              platform="${BASH_REMATCH[1]}"
            fi

            image=$(echo "$line_clean" | awk '{print $NF}' | sed 's/@.*//')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            image_name=$(echo "$image_name_tag" | cut -d: -f1)

            name_space=$(echo "$image" | awk -F'/' '{
              if (NF==3) print $2;
              else if (NF==2 && $1 != "docker.io") print $1;
              else print "library";
            }' | sed 's/[^a-zA-Z0-9._-]/_/g')

            if [[ -n "${temp_map[$image_name]}" ]]; then
              if [[ "${temp_map[$image_name]}" != "$name_space" ]]; then
                duplicate_images["$image_name"]=1
              fi
            else
              temp_map["$image_name"]="$name_space"
            fi
          done < images.txt

          while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            [[ "$line" =~ ^[[:space:]]*# ]] && continue

            line_clean=$(echo "$line" | sed 's/^[[:space:]]*docker[[:space:]]\+pull[[:space:]]\+//')
            platform=""
            if [[ $line_clean =~ --platform[=\ ]+([^[:space:]]+) ]]; then
              platform="${BASH_REMATCH[1]}"
            fi

            image=$(echo "$line_clean" | awk '{print $NF}' | sed 's/@.*//')
            original_image="$image"

            echo "Pulling $image (platform: $platform)"
            if [ -n "$platform" ]; then
              docker pull --platform "$platform" "$image"
            else
              docker pull "$image"
            fi

            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}' | sed 's/@.*//')
            image_name=$(echo "$image_name_tag" | cut -d: -f1)

            name_space=$(echo "$image" | awk -F'/' '{
              if (NF==3) print $2;
              else if (NF==2 && $1 != "docker.io") print $1;
              else print "library";
            }' | sed 's/[^a-zA-Z0-9._-]/_/g')

            platform_prefix=""
            if [ -n "$platform" ]; then
              platform_prefix="${platform//\//_}_"
            fi

            name_space_prefix=""
            if [[ -n "${duplicate_images[$image_name]}" ]] && [ -n "$name_space" ] && [ "$name_space" != "library" ]; then
              name_space_prefix="${name_space}_"
            fi

            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${platform_prefix}${name_space_prefix}${image_name_tag}"
            echo "Tagging $original_image -> $new_image"
            docker tag "$original_image" "$new_image"
            docker push "$new_image"

            echo "Cleaning up..."
            df -hT
            docker rmi "$original_image" || true
            docker rmi "$new_image" || true
            df -hT
          done < images.txt
          EOF
